# pipeline/export_prodigy.py
import json
from typing import Dict, List, Any, Iterable

# Optional: map your field names to human-friendly NER labels
LABEL_MAP = {
    "legal_entity": "LEGAL_ENTITY",
    "counterparty_acronym": "COUNTERPARTY",
    "book": "BOOK",
    "region_code": "REGION",
    "timezone": "TIMEZONE",
    "source_system": "SOURCE_SYSTEM",
    "originating_system": "ORIGINATING_SYSTEM",
    "trade_id": "TRADE_ID",
    "execution_key": "EXECUTION_KEY",
    "business_date": "BUSINESS_DATE",
    "trade_date": "TRADE_DATE",
    "settlement_date": "SETTLEMENT_DATE",
    "market_rate_datetime": "MARKET_RATE_TIME",
    "pnl_amount": "PNL_AMOUNT",
    "commission_amount": "COMMISSION_AMOUNT",
    "commission_ccy": "COMMISSION_CCY",
    "pnl_ccy": "PNL_CCY",
    "base_currency_cd": "BASE_CCY",
    "orig_currency_cd": "ORIG_CCY",
    "deviation_percent": "DEVIATION_PCT",
    "base_threshold_percent": "BASE_THRESHOLD_PCT",
    "orig_threshold_percent": "ORIG_THRESHOLD_PCT",
    "record_type": "RECORD_TYPE",
    "trade_type": "TRADE_TYPE",
    "alert_description": "ALERT_DESC",
    "hms_book_guid": "HMS_BOOK_GUID",
    "bui_value": "BUI_VALUE",
    "notional_range": "NOTIONAL_RANGE",
    "tenor": "TENOR"
}

def _label_of(field: str) -> str:
    return LABEL_MAP.get(field, field.upper())

def _unique_spans(spans: Iterable[dict]) -> List[dict]:
    seen = set()
    out = []
    for s in spans:
        key = (s["start"], s["end"], s["label"])
        if key in seen:
            continue
        seen.add(key)
        out.append(s)
    return out

def build_prodigy_examples(
    text: str,
    fields: Dict[str, dict],
    top_k_per_field: int = 3
) -> List[dict]:
    """
    Convert resolved pipeline output to Prodigy ner.manual examples.

    We use the evidence spans we already store per field.
    """
    spans = []
    meta = {}
    # confidence + value per field into meta (for sidebar)
    for field, info in fields.items():
        meta[field] = {
            "value": info.get("value"),
            "confidence": info.get("final_confidence"),
            "state": info.get("state"),
            "method": info.get("method")
        }
        evs = info.get("evidence", []) or []
        # take top-k evidences to show as highlighted spans
        for ev in evs[:top_k_per_field]:
            start, end = (0, 0)
            if "span" in ev and isinstance(ev["span"], (list, tuple)) and len(ev["span"]) == 2:
                start, end = int(ev["span"][0]), int(ev["span"][1])
                if start == end:
                    continue  # skip zero-length just in case
            label = _label_of(field)
            spans.append({
                "start": start,
                "end": end,
                "label": label,
                # Use Prodigy's tokenless character offsets; meta can carry extra info
                "meta": {
                    "raw": ev.get("raw"),
                    "conf": ev.get("confidence"),
                    "method": ev.get("method")
                }
            })

    spans = _unique_spans(spans)

    example = {
        "text": text,
        "spans": spans,
        # You can include arbitrary metadata (shows in the top-right of
